# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile.dev in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    env_file:
      - .env
    # environment:
    #   DJANGO_DEV_DB: True
    expose:
      - 8000
    volumes:
      - static-vol:/app/static
      - media-vol:/app/media
    networks:
      - StoreNet
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:${DB_IMAGE_TAG:-17.2-alpine}
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-AppDatabase}
      POSTGRES_USER: ${DB_USER:-appuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?password not set!}
      POSTGRES_HOST: ${DB_HOST:-db}
      POSTGRES_PORT: ${DB_PORT:-5432}
    networks:
      - StoreNet
    expose:
      - '${DB_PORT:-5432}'
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:${PROXY_IMAGE_TAG:-latest}
    ports:
      - "80:80"
    env_file:
      - .env
    volumes:
      - ../nginx/custom-nginx.conf:/etc/nginx/conf.d/default.conf
      - static-vol:/app/static
      - media-vol:/app/media
    depends_on:
      - server
    networks:
      - StoreNet

volumes:
  db-data:
  static-vol:
  media-vol:
networks:
  StoreNet:
    driver: bridge
